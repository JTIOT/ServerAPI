{"ast":null,"code":"import _slicedToArray from \"/Users/Nelson/Desktop/JITIOT/ServerAPI/client/apifrontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/Nelson/Desktop/JITIOT/ServerAPI/client/apifrontend/src/components/qr-reader/qr-reader.jsx\";\nimport React, { useState } from 'react';\nimport QrReader from 'react-qr-reader';\nimport classes from './qr-reader.module.scss';\n\nconst QRCodeReader = () => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        qrcodeList = _useState2[0],\n        setQrcodeList = _useState2[1];\n  /**\n   * Format mac from QRCode\n   * e.g http://www.ban99.com/aibed/2059A0B0AA20\n   * turn into 20:59:A0:B0:AA:20\n   * @param {*} qrcode \n   */\n\n\n  const macFromQRCode = qrcode => {\n    //extract mac from qrcode url\n    const mac = qrcode.substring(qrcode.lastIndexOf('/') + 1); //turn it into array of chars\n\n    const strArr = mac.split(''); //combine chars with ':'\n\n    const formatedMac = strArr.reduce((acc, value, index) => {\n      if (index !== 0 && index + 1 !== strArr.length) {\n        const newVal = (index + 1) % 2 === 0 ? value + ':' : value;\n        return acc + newVal;\n      }\n\n      return acc.length > 0 ? acc + value : value;\n    }, '');\n    return formatedMac;\n  };\n\n  const handleError = err => {\n    console.log('QRCode error ', err); // setQrcode(null);\n  };\n\n  const handleScan = data => {\n    // console.log('QRCode scan ', data);\n    if (data) {\n      const mac = macFromQRCode(data);\n      const macExist = qrcodeList.find(value => {\n        return value === mac;\n      });\n\n      if (!macExist) {\n        const newMacList = [...qrcodeList, mac];\n        console.log('add mac ', mac, newMacList);\n        setQrcodeList(newMacList);\n      }\n    }\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, React.createElement(QrReader, {\n    delay: 100,\n    onError: handleError,\n    onScan: handleScan,\n    style: {\n      width: '30%'\n    },\n    resolution: 1000,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, qrcodeList.map((mac, i) => {\n    return React.createElement(\"p\", {\n      key: i,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, mac);\n  })));\n};\n\nexport default QRCodeReader;","map":{"version":3,"sources":["/Users/Nelson/Desktop/JITIOT/ServerAPI/client/apifrontend/src/components/qr-reader/qr-reader.jsx"],"names":["React","useState","QrReader","classes","QRCodeReader","qrcodeList","setQrcodeList","macFromQRCode","qrcode","mac","substring","lastIndexOf","strArr","split","formatedMac","reduce","acc","value","index","length","newVal","handleError","err","console","log","handleScan","data","macExist","find","newMacList","width","map","i"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,OAAOC,OAAP,MAAoB,yBAApB;;AAEA,MAAMC,YAAY,GAAG,MAAM;AAAA,oBAEaH,QAAQ,CAAC,EAAD,CAFrB;AAAA;AAAA,QAEhBI,UAFgB;AAAA,QAEJC,aAFI;AAIvB;;;;;;;;AAMA,QAAMC,aAAa,GAAIC,MAAD,IAAY;AAE9B;AACA,UAAMC,GAAG,GAAGD,MAAM,CAACE,SAAP,CAAiBF,MAAM,CAACG,WAAP,CAAmB,GAAnB,IAAwB,CAAzC,CAAZ,CAH8B,CAI9B;;AACA,UAAMC,MAAM,GAAGH,GAAG,CAACI,KAAJ,CAAU,EAAV,CAAf,CAL8B,CAM9B;;AACA,UAAMC,WAAW,GAAGF,MAAM,CAACG,MAAP,CAAc,CAACC,GAAD,EAAMC,KAAN,EAAaC,KAAb,KAAqB;AAEnD,UAAGA,KAAK,KAAK,CAAV,IAAgBA,KAAK,GAAC,CAAP,KAAcN,MAAM,CAACO,MAAvC,EAA8C;AAC1C,cAAMC,MAAM,GAAI,CAACF,KAAK,GAAC,CAAP,IAAY,CAAb,KAAoB,CAApB,GAAwBD,KAAK,GAAC,GAA9B,GAAqCA,KAApD;AACA,eAAOD,GAAG,GAACI,MAAX;AACH;;AACD,aAAOJ,GAAG,CAACG,MAAJ,GAAW,CAAX,GAAaH,GAAG,GAACC,KAAjB,GAAuBA,KAA9B;AAEH,KARmB,EAQjB,EARiB,CAApB;AAUA,WAAOH,WAAP;AACH,GAlBD;;AAoBA,QAAMO,WAAW,GAAIC,GAAD,IAAS;AAEzBC,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BF,GAA7B,EAFyB,CAIzB;AACH,GALD;;AAOA,QAAMG,UAAU,GAAIC,IAAD,IAAU;AAEzB;AAEA,QAAGA,IAAH,EAAQ;AAEJ,YAAMjB,GAAG,GAAGF,aAAa,CAACmB,IAAD,CAAzB;AACA,YAAMC,QAAQ,GAAGtB,UAAU,CAACuB,IAAX,CAAiBX,KAAD,IAAS;AACtC,eAAOA,KAAK,KAAKR,GAAjB;AACH,OAFgB,CAAjB;;AAGA,UAAG,CAACkB,QAAJ,EAAa;AACT,cAAME,UAAU,GAAG,CAAC,GAAGxB,UAAJ,EAAgBI,GAAhB,CAAnB;AACAc,QAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBf,GAAxB,EAA6BoB,UAA7B;AACAvB,QAAAA,aAAa,CAACuB,UAAD,CAAb;AACH;AAEJ;AACJ,GAjBD;;AAmBA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,QAAD;AACA,IAAA,KAAK,EAAE,GADP;AAEA,IAAA,OAAO,EAAER,WAFT;AAGA,IAAA,MAAM,EAAEI,UAHR;AAIA,IAAA,KAAK,EAAE;AAAEK,MAAAA,KAAK,EAAE;AAAT,KAJP;AAKA,IAAA,UAAU,EAAE,IALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAQI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEIzB,UAAU,CAAC0B,GAAX,CAAe,CAACtB,GAAD,EAAMuB,CAAN,KAAU;AACrB,WAAO;AAAG,MAAA,GAAG,EAAEA,CAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAYvB,GAAZ,CAAP;AACH,GAFD,CAFJ,CARJ,CADJ;AAkBH,CA1ED;;AA4EA,eAAeL,YAAf","sourcesContent":["import React, {useState} from 'react';\nimport QrReader from 'react-qr-reader';\nimport classes from './qr-reader.module.scss';\n\nconst QRCodeReader = () => {\n\n    const [qrcodeList, setQrcodeList] = useState([]);\n\n    /**\n     * Format mac from QRCode\n     * e.g http://www.ban99.com/aibed/2059A0B0AA20\n     * turn into 20:59:A0:B0:AA:20\n     * @param {*} qrcode \n     */\n    const macFromQRCode = (qrcode) => {\n\n        //extract mac from qrcode url\n        const mac = qrcode.substring(qrcode.lastIndexOf('/')+1);\n        //turn it into array of chars\n        const strArr = mac.split('');\n        //combine chars with ':'\n        const formatedMac = strArr.reduce((acc, value, index)=>{\n\n            if(index !== 0 && (index+1) !== strArr.length){\n                const newVal = ((index+1) % 2) === 0? (value+':') : value;\n                return acc+newVal;\n            }\n            return acc.length>0?acc+value:value;\n\n        }, '');\n\n        return formatedMac;\n    }\n\n    const handleError = (err) => {\n\n        console.log('QRCode error ', err);\n\n        // setQrcode(null);\n    }\n\n    const handleScan = (data) => {\n\n        // console.log('QRCode scan ', data);\n\n        if(data){\n\n            const mac = macFromQRCode(data);\n            const macExist = qrcodeList.find((value)=>{\n                return value === mac;\n            })\n            if(!macExist){\n                const newMacList = [...qrcodeList, mac];\n                console.log('add mac ', mac, newMacList);\n                setQrcodeList(newMacList);\n            }\n            \n        }\n    }\n\n    return (\n        <div>\n            <QrReader\n            delay={100}\n            onError={handleError}\n            onScan={handleScan}\n            style={{ width: '30%' }}\n            resolution={1000}\n            />\n            <div>\n            {\n                qrcodeList.map((mac, i)=>{\n                    return <p key={i}>{mac}</p>\n                })\n            }\n            </div>\n        </div>\n    );\n}\n\nexport default QRCodeReader;"]},"metadata":{},"sourceType":"module"}