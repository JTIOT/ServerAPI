{"ast":null,"code":"import _toConsumableArray from\"/Users/Nelson/Desktop/JITIOT/ServerAPI/client/apifrontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/Users/Nelson/Desktop/JITIOT/ServerAPI/client/apifrontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';import QrReader from'react-qr-reader';import classes from'./qr-reader.module.scss';var QRCodeReader=function QRCodeReader(){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),qrcodeList=_useState2[0],setQrcodeList=_useState2[1];/**\n     * Format mac from QRCode\n     * e.g http://www.ban99.com/aibed/2059A0B0AA20\n     * turn into 20:59:A0:B0:AA:20\n     * @param {*} qrcode \n     */var macFromQRCode=function macFromQRCode(qrcode){//extract mac from qrcode url\nvar mac=qrcode.substring(qrcode.lastIndexOf('/')+1);//turn it into array of chars\nvar strArr=mac.split('');//combine chars with ':'\nvar formatedMac=strArr.reduce(function(acc,value,index){if(index!==0&&index+1!==strArr.length){var newVal=(index+1)%2===0?value+':':value;return acc+newVal;}return acc.length>0?acc+value:value;},'');return formatedMac;};var handleError=function handleError(err){console.log('QRCode error ',err);// setQrcode(null);\n};var handleScan=function handleScan(data){// console.log('QRCode scan ', data);\nif(data){var mac=macFromQRCode(data);var macExist=qrcodeList.find(function(value){return value===mac;});if(!macExist){var newMacList=[].concat(_toConsumableArray(qrcodeList),[mac]);console.log('add mac ',mac,newMacList);setQrcodeList(newMacList);}}};return React.createElement(\"div\",null,React.createElement(QrReader,{delay:100,onError:handleError,onScan:handleScan,style:{width:'30%'},resolution:1000}),React.createElement(\"div\",null,qrcodeList.map(function(mac,i){return React.createElement(\"p\",{key:i},mac);})));};export default QRCodeReader;","map":{"version":3,"sources":["/Users/Nelson/Desktop/JITIOT/ServerAPI/client/apifrontend/src/components/qr-reader/qr-reader.jsx"],"names":["React","useState","QrReader","classes","QRCodeReader","qrcodeList","setQrcodeList","macFromQRCode","qrcode","mac","substring","lastIndexOf","strArr","split","formatedMac","reduce","acc","value","index","length","newVal","handleError","err","console","log","handleScan","data","macExist","find","newMacList","width","map","i"],"mappings":"gSAAA,MAAOA,CAAAA,KAAP,EAAeC,QAAf,KAA8B,OAA9B,CACA,MAAOC,CAAAA,QAAP,KAAqB,iBAArB,CACA,MAAOC,CAAAA,OAAP,KAAoB,yBAApB,CAEA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,EAAM,eAEaH,QAAQ,CAAC,EAAD,CAFrB,wCAEhBI,UAFgB,eAEJC,aAFI,eAIvB;;;;;OAMA,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACC,MAAD,CAAY,CAE9B;AACA,GAAMC,CAAAA,GAAG,CAAGD,MAAM,CAACE,SAAP,CAAiBF,MAAM,CAACG,WAAP,CAAmB,GAAnB,EAAwB,CAAzC,CAAZ,CACA;AACA,GAAMC,CAAAA,MAAM,CAAGH,GAAG,CAACI,KAAJ,CAAU,EAAV,CAAf,CACA;AACA,GAAMC,CAAAA,WAAW,CAAGF,MAAM,CAACG,MAAP,CAAc,SAACC,GAAD,CAAMC,KAAN,CAAaC,KAAb,CAAqB,CAEnD,GAAGA,KAAK,GAAK,CAAV,EAAgBA,KAAK,CAAC,CAAP,GAAcN,MAAM,CAACO,MAAvC,CAA8C,CAC1C,GAAMC,CAAAA,MAAM,CAAI,CAACF,KAAK,CAAC,CAAP,EAAY,CAAb,GAAoB,CAApB,CAAwBD,KAAK,CAAC,GAA9B,CAAqCA,KAApD,CACA,MAAOD,CAAAA,GAAG,CAACI,MAAX,CACH,CACD,MAAOJ,CAAAA,GAAG,CAACG,MAAJ,CAAW,CAAX,CAAaH,GAAG,CAACC,KAAjB,CAAuBA,KAA9B,CAEH,CARmB,CAQjB,EARiB,CAApB,CAUA,MAAOH,CAAAA,WAAP,CACH,CAlBD,CAoBA,GAAMO,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,GAAD,CAAS,CAEzBC,OAAO,CAACC,GAAR,CAAY,eAAZ,CAA6BF,GAA7B,EAEA;AACH,CALD,CAOA,GAAMG,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,IAAD,CAAU,CAEzB;AAEA,GAAGA,IAAH,CAAQ,CAEJ,GAAMjB,CAAAA,GAAG,CAAGF,aAAa,CAACmB,IAAD,CAAzB,CACA,GAAMC,CAAAA,QAAQ,CAAGtB,UAAU,CAACuB,IAAX,CAAgB,SAACX,KAAD,CAAS,CACtC,MAAOA,CAAAA,KAAK,GAAKR,GAAjB,CACH,CAFgB,CAAjB,CAGA,GAAG,CAACkB,QAAJ,CAAa,CACT,GAAME,CAAAA,UAAU,8BAAOxB,UAAP,GAAmBI,GAAnB,EAAhB,CACAc,OAAO,CAACC,GAAR,CAAY,UAAZ,CAAwBf,GAAxB,CAA6BoB,UAA7B,EACAvB,aAAa,CAACuB,UAAD,CAAb,CACH,CAEJ,CACJ,CAjBD,CAmBA,MACI,gCACI,oBAAC,QAAD,EACA,KAAK,CAAE,GADP,CAEA,OAAO,CAAER,WAFT,CAGA,MAAM,CAAEI,UAHR,CAIA,KAAK,CAAE,CAAEK,KAAK,CAAE,KAAT,CAJP,CAKA,UAAU,CAAE,IALZ,EADJ,CAQI,+BAEIzB,UAAU,CAAC0B,GAAX,CAAe,SAACtB,GAAD,CAAMuB,CAAN,CAAU,CACrB,MAAO,0BAAG,GAAG,CAAEA,CAAR,EAAYvB,GAAZ,CAAP,CACH,CAFD,CAFJ,CARJ,CADJ,CAkBH,CA1ED,CA4EA,cAAeL,CAAAA,YAAf","sourcesContent":["import React, {useState} from 'react';\nimport QrReader from 'react-qr-reader';\nimport classes from './qr-reader.module.scss';\n\nconst QRCodeReader = () => {\n\n    const [qrcodeList, setQrcodeList] = useState([]);\n\n    /**\n     * Format mac from QRCode\n     * e.g http://www.ban99.com/aibed/2059A0B0AA20\n     * turn into 20:59:A0:B0:AA:20\n     * @param {*} qrcode \n     */\n    const macFromQRCode = (qrcode) => {\n\n        //extract mac from qrcode url\n        const mac = qrcode.substring(qrcode.lastIndexOf('/')+1);\n        //turn it into array of chars\n        const strArr = mac.split('');\n        //combine chars with ':'\n        const formatedMac = strArr.reduce((acc, value, index)=>{\n\n            if(index !== 0 && (index+1) !== strArr.length){\n                const newVal = ((index+1) % 2) === 0? (value+':') : value;\n                return acc+newVal;\n            }\n            return acc.length>0?acc+value:value;\n\n        }, '');\n\n        return formatedMac;\n    }\n\n    const handleError = (err) => {\n\n        console.log('QRCode error ', err);\n\n        // setQrcode(null);\n    }\n\n    const handleScan = (data) => {\n\n        // console.log('QRCode scan ', data);\n\n        if(data){\n\n            const mac = macFromQRCode(data);\n            const macExist = qrcodeList.find((value)=>{\n                return value === mac;\n            })\n            if(!macExist){\n                const newMacList = [...qrcodeList, mac];\n                console.log('add mac ', mac, newMacList);\n                setQrcodeList(newMacList);\n            }\n            \n        }\n    }\n\n    return (\n        <div>\n            <QrReader\n            delay={100}\n            onError={handleError}\n            onScan={handleScan}\n            style={{ width: '30%' }}\n            resolution={1000}\n            />\n            <div>\n            {\n                qrcodeList.map((mac, i)=>{\n                    return <p key={i}>{mac}</p>\n                })\n            }\n            </div>\n        </div>\n    );\n}\n\nexport default QRCodeReader;"]},"metadata":{},"sourceType":"module"}