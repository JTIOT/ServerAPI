{"ast":null,"code":"import _slicedToArray from \"/Users/Nelson/Desktop/JITIOT/ServerAPI/client/apifrontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/Nelson/Desktop/JITIOT/ServerAPI/client/apifrontend/src/components/qr-reder.jsx\";\nimport React, { useState } from 'react';\nimport QrReader from 'react-qr-reader';\nimport classes from './qr-reder.module.scss';\n\nconst QRCodeReader = () => {\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        qrcode = _useState2[0],\n        setQrcode = _useState2[1];\n\n  const handleError = err => {\n    console.log('QRCode error ', err); // setQrcode(null);\n  };\n\n  const handleScan = data => {\n    console.log('QRCode scan ', data);\n\n    if (data) {\n      const mac = data.substring(data.lastIndexOf('/') + 1);\n      const strArr = mac.split('');\n      const formatMac = strArr.reduce((acc, value, index) => {\n        if (index !== 0 && index + 1 !== strArr.length) {\n          const newVal = (index + 1) % 2 === 0 ? value + ':' : value;\n          return acc + newVal;\n        }\n\n        return acc.length > 0 ? acc : value;\n      }, '');\n      setQrcode(formatMac);\n    }\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, React.createElement(QrReader, {\n    delay: 100,\n    onError: handleError,\n    onScan: handleScan,\n    style: {\n      width: '30%'\n    },\n    resolution: 1000,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }), qrcode ? React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, qrcode)) : null);\n};\n\nexport default QRCodeReader;","map":{"version":3,"sources":["/Users/Nelson/Desktop/JITIOT/ServerAPI/client/apifrontend/src/components/qr-reder.jsx"],"names":["React","useState","QrReader","classes","QRCodeReader","qrcode","setQrcode","handleError","err","console","log","handleScan","data","mac","substring","lastIndexOf","strArr","split","formatMac","reduce","acc","value","index","length","newVal","width"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,OAAOC,OAAP,MAAoB,wBAApB;;AAEA,MAAMC,YAAY,GAAG,MAAM;AAAA,oBAEKH,QAAQ,CAAC,IAAD,CAFb;AAAA;AAAA,QAEhBI,MAFgB;AAAA,QAERC,SAFQ;;AAIvB,QAAMC,WAAW,GAAIC,GAAD,IAAS;AAEzBC,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BF,GAA7B,EAFyB,CAIzB;AACH,GALD;;AAOA,QAAMG,UAAU,GAAIC,IAAD,IAAU;AAEzBH,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BE,IAA5B;;AAEA,QAAGA,IAAH,EAAQ;AAEJ,YAAMC,GAAG,GAAGD,IAAI,CAACE,SAAL,CAAeF,IAAI,CAACG,WAAL,CAAiB,GAAjB,IAAsB,CAArC,CAAZ;AACA,YAAMC,MAAM,GAAGH,GAAG,CAACI,KAAJ,CAAU,EAAV,CAAf;AACA,YAAMC,SAAS,GAAGF,MAAM,CAACG,MAAP,CAAc,CAACC,GAAD,EAAMC,KAAN,EAAaC,KAAb,KAAqB;AAEjD,YAAGA,KAAK,KAAK,CAAV,IAAgBA,KAAK,GAAC,CAAP,KAAcN,MAAM,CAACO,MAAvC,EAA8C;AAC1C,gBAAMC,MAAM,GAAI,CAACF,KAAK,GAAC,CAAP,IAAY,CAAb,KAAoB,CAApB,GAAwBD,KAAK,GAAC,GAA9B,GAAqCA,KAApD;AACA,iBAAOD,GAAG,GAACI,MAAX;AACH;;AACD,eAAOJ,GAAG,CAACG,MAAJ,GAAW,CAAX,GAAaH,GAAb,GAAiBC,KAAxB;AAEH,OARiB,EAQf,EARe,CAAlB;AAUAf,MAAAA,SAAS,CAACY,SAAD,CAAT;AACH;AACJ,GApBD;;AAsBA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,QAAD;AACA,IAAA,KAAK,EAAE,GADP;AAEA,IAAA,OAAO,EAAEX,WAFT;AAGA,IAAA,MAAM,EAAEI,UAHR;AAIA,IAAA,KAAK,EAAE;AAAEc,MAAAA,KAAK,EAAE;AAAT,KAJP;AAKA,IAAA,UAAU,EAAE,IALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EASQpB,MAAM,GACN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIA,MAAJ,CADJ,CADM,GAKN,IAdR,CADJ;AAmBH,CApDD;;AAsDA,eAAeD,YAAf","sourcesContent":["import React, {useState} from 'react';\nimport QrReader from 'react-qr-reader';\nimport classes from './qr-reder.module.scss';\n\nconst QRCodeReader = () => {\n\n    const [qrcode, setQrcode] = useState(null);\n\n    const handleError = (err) => {\n\n        console.log('QRCode error ', err);\n\n        // setQrcode(null);\n    }\n\n    const handleScan = (data) => {\n\n        console.log('QRCode scan ', data);\n\n        if(data){\n\n            const mac = data.substring(data.lastIndexOf('/')+1);\n            const strArr = mac.split('');\n            const formatMac = strArr.reduce((acc, value, index)=>{\n\n                if(index !== 0 && (index+1) !== strArr.length){\n                    const newVal = ((index+1) % 2) === 0? (value+':') : value;\n                    return acc+newVal;\n                }\n                return acc.length>0?acc:value;\n\n            }, '');\n\n            setQrcode(formatMac);\n        }\n    }\n\n    return (\n        <div>\n            <QrReader\n            delay={100}\n            onError={handleError}\n            onScan={handleScan}\n            style={{ width: '30%' }}\n            resolution={1000}\n            />\n            {\n                qrcode?\n                <div>\n                    <p>{qrcode}</p>\n                </div>\n                :\n                null\n            }\n        </div>\n    );\n}\n\nexport default QRCodeReader;"]},"metadata":{},"sourceType":"module"}