{"ast":null,"code":"const exec = require('child_process').exec;\n\nconst tree = require('./tree');\n\nconst utils = require('./utils');\n\nvar hasPS = true; // discover if the OS has `ps`, and therefore can use psTree\n\nexec('ps', error => {\n  module.exports.hasPS = hasPS = !error;\n});\n\nmodule.exports = function main(pid, callback) {\n  if (typeof pid === 'number') {\n    pid = pid.toString();\n  }\n\n  if (hasPS && !process.env.NO_PS) {\n    return tree(pid, callback);\n  }\n\n  utils.getStat().then(utils.tree).then(tree => utils.pidsForTree(tree, pid)).then(res => callback(null, res.map(p => p.PID))).catch(error => callback(error));\n};\n\nif (!module.parent) {\n  module.exports(process.argv[2], (e, pids) => console.log(pids));\n}\n\nmodule.exports.hasPS = hasPS;","map":{"version":3,"sources":["/Users/Nelson/Desktop/JITIOT/ServerAPI/node_modules/pstree.remy/lib/index.js"],"names":["exec","require","tree","utils","hasPS","error","module","exports","main","pid","callback","toString","process","env","NO_PS","getStat","then","pidsForTree","res","map","p","PID","catch","parent","argv","e","pids","console","log"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,eAAD,CAAP,CAAyBD,IAAtC;;AACA,MAAME,IAAI,GAAGD,OAAO,CAAC,QAAD,CAApB;;AACA,MAAME,KAAK,GAAGF,OAAO,CAAC,SAAD,CAArB;;AACA,IAAIG,KAAK,GAAG,IAAZ,C,CAEA;;AACAJ,IAAI,CAAC,IAAD,EAAOK,KAAK,IAAI;AAClBC,EAAAA,MAAM,CAACC,OAAP,CAAeH,KAAf,GAAuBA,KAAK,GAAG,CAACC,KAAhC;AACD,CAFG,CAAJ;;AAIAC,MAAM,CAACC,OAAP,GAAiB,SAASC,IAAT,CAAcC,GAAd,EAAmBC,QAAnB,EAA6B;AAC5C,MAAI,OAAOD,GAAP,KAAe,QAAnB,EAA6B;AAC3BA,IAAAA,GAAG,GAAGA,GAAG,CAACE,QAAJ,EAAN;AACD;;AAED,MAAIP,KAAK,IAAI,CAACQ,OAAO,CAACC,GAAR,CAAYC,KAA1B,EAAiC;AAC/B,WAAOZ,IAAI,CAACO,GAAD,EAAMC,QAAN,CAAX;AACD;;AAEDP,EAAAA,KAAK,CACFY,OADH,GAEGC,IAFH,CAEQb,KAAK,CAACD,IAFd,EAGGc,IAHH,CAGQd,IAAI,IAAIC,KAAK,CAACc,WAAN,CAAkBf,IAAlB,EAAwBO,GAAxB,CAHhB,EAIGO,IAJH,CAIQE,GAAG,IAAIR,QAAQ,CAAC,IAAD,EAAOQ,GAAG,CAACC,GAAJ,CAAQC,CAAC,IAAIA,CAAC,CAACC,GAAf,CAAP,CAJvB,EAKGC,KALH,CAKSjB,KAAK,IAAIK,QAAQ,CAACL,KAAD,CAL1B;AAMD,CAfD;;AAiBA,IAAI,CAACC,MAAM,CAACiB,MAAZ,EAAoB;AAClBjB,EAAAA,MAAM,CAACC,OAAP,CAAeK,OAAO,CAACY,IAAR,CAAa,CAAb,CAAf,EAAgC,CAACC,CAAD,EAAIC,IAAJ,KAAaC,OAAO,CAACC,GAAR,CAAYF,IAAZ,CAA7C;AACD;;AAEDpB,MAAM,CAACC,OAAP,CAAeH,KAAf,GAAuBA,KAAvB","sourcesContent":["const exec = require('child_process').exec;\nconst tree = require('./tree');\nconst utils = require('./utils');\nvar hasPS = true;\n\n// discover if the OS has `ps`, and therefore can use psTree\nexec('ps', error => {\n  module.exports.hasPS = hasPS = !error;\n});\n\nmodule.exports = function main(pid, callback) {\n  if (typeof pid === 'number') {\n    pid = pid.toString();\n  }\n\n  if (hasPS && !process.env.NO_PS) {\n    return tree(pid, callback);\n  }\n\n  utils\n    .getStat()\n    .then(utils.tree)\n    .then(tree => utils.pidsForTree(tree, pid))\n    .then(res => callback(null, res.map(p => p.PID)))\n    .catch(error => callback(error));\n};\n\nif (!module.parent) {\n  module.exports(process.argv[2], (e, pids) => console.log(pids));\n}\n\nmodule.exports.hasPS = hasPS;\n"]},"metadata":{},"sourceType":"script"}