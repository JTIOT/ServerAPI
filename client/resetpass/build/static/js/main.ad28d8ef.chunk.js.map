{"version":3,"sources":["components/resetPassword/resetPassword.module.scss","components/resetPassword/resetPassword.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","ResetPassword","match","params","userId","token","useState","resetSuccess","setResetSuccess","newPassword","setNewPassword","confirmPassword","setConfirmPassword","passErrorMsg","setPassErrorMsg","serverErrorMsg","setServerErrorMsg","useEffect","className","classes","overlay","title","errorMessage","content","onSubmit","e","preventDefault","axios","post","then","res","data","catch","err","a","async","console","log","response","resData","message","inputGroup","passwordField","type","onChange","target","value","required","confirmPasswordField","onChangeCapture","submitBtn","App","exact","path","render","component","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kJACAA,EAAOC,QAAU,CAAC,QAAU,+BAA+B,MAAQ,6BAA6B,aAAe,oCAAoC,aAAe,oCAAoC,QAAU,+BAA+B,WAAa,oC,yKCgH7OC,EA7GO,SAAC,GAAW,IAAD,IAATC,MAEUC,OAAvBC,EAFsB,EAEtBA,OAAQC,EAFc,EAEdA,MAFc,EAGWC,oBAAS,GAHpB,mBAGtBC,EAHsB,KAGRC,EAHQ,OAISF,mBAAS,IAJlB,mBAItBG,EAJsB,KAITC,EAJS,OAKiBJ,mBAAS,IAL1B,mBAKtBK,EALsB,KAKLC,EALK,OAMWN,mBAAS,IANpB,mBAMtBO,EANsB,KAMRC,EANQ,OAOeR,mBAAS,IAPxB,mBAOtBS,EAPsB,KAONC,EAPM,KAS7BC,qBAAU,WAWFH,EAVAL,GAAgBE,EAKjBF,IAAgBE,GACdF,GAAgBE,EAID,GAHA,0BANA,qCAYxB,CAACF,EAAaE,IA6Bd,OACI,yBAAKO,UAAWC,IAAQC,SACpB,yBAAKF,UAAWC,IAAQE,OAAxB,kBAIIN,EACA,yBAAKG,UAAWC,IAAQG,cACnBP,GAGL,KAGAF,EACA,yBAAKK,UAAWC,IAAQG,cACnBT,GAGL,KAIAN,EACA,yBAAKW,UAAWC,IAAQZ,cAAxB,6BAIA,0BAAMW,UAAWC,IAAQI,QAASC,SAvDzB,SAACC,GAClBA,EAAEC,iBAEEb,GAEAc,IAAMC,KACN,+CACA,CACIxB,OAAQA,EACRK,YAAaA,EACbJ,MAAOA,IAEVwB,MAAK,SAAAC,GACCA,GAAOA,EAAIC,MACVvB,GAAgB,MAGvBwB,OAAM,SAAMC,GAAN,eAAAC,EAAAC,OAAA,mDACHC,QAAQC,IAAIJ,IACTA,EAAIK,SAFJ,kCAAAJ,EAAA,MAGuBD,EAAIK,SAASP,MAHpC,OAGOQ,EAHP,OAICvB,EAAkBuB,EAAQC,SAJ3B,0CAuCC,yBAAKtB,UAAWC,IAAQsB,YACpB,8CACA,2BAAOvB,UAAWC,IAAQuB,cACtBC,KAAK,WACLC,SAAU,SAACnB,GAAD,OAAKf,EAAee,EAAEoB,OAAOC,QACvCC,UAAQ,KAEhB,yBAAK7B,UAAWC,IAAQsB,YACpB,mDACA,2BAAOvB,UAAWC,IAAQ6B,qBACtBL,KAAK,WACLM,gBAAiB,SAACxB,GAAD,OAAKb,EAAmBa,EAAEoB,OAAOC,QAClDC,UAAQ,KAGZlC,EACA,KAEA,yBAAKK,UAAWC,IAAQ+B,WACpB,4BAAQP,KAAK,UAAb,c,MCxFbQ,MAXf,WACE,OACE,yBAAKjC,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOkC,OAAK,EAACC,KAAK,IAAIC,OAAQ,kBAAI,yCAClC,kBAAC,IAAD,CAAOF,OAAK,EAACC,KAAK,gCAAgCE,UAAWtD,O,QCEjDuD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASzD,MACvB,2DCXN0D,IAASN,OACL,kBAAC,IAAD,KACI,kBAAC,EAAD,OAEFO,SAASC,eAAe,SDwHxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpC,MAAK,SAAAqC,GACjCA,EAAaC,kB","file":"static/js/main.ad28d8ef.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"overlay\":\"resetPassword_overlay__1cQKp\",\"title\":\"resetPassword_title__2fmLy\",\"errorMessage\":\"resetPassword_errorMessage__nrrqs\",\"resetSuccess\":\"resetPassword_resetSuccess__2PbGs\",\"content\":\"resetPassword_content__17lvx\",\"inputGroup\":\"resetPassword_inputGroup__31qGS\"};","import React,{useState, useEffect} from 'react';\nimport axios from 'axios';\nimport classes from './resetPassword.module.scss';\n\nconst ResetPassword = ({match})=>{\n\n    const {userId, token} = match.params;\n    const [resetSuccess, setResetSuccess] = useState(false);\n    const [newPassword, setNewPassword] = useState('');\n    const [confirmPassword, setConfirmPassword] = useState('');\n    const [passErrorMsg, setPassErrorMsg] = useState('');\n    const [serverErrorMsg, setServerErrorMsg] = useState('');\n\n    useEffect(()=>{\n        if(!newPassword && !confirmPassword){\n            setPassErrorMsg('Please, enter your new password');\n            return; \n        }\n        \n        if(newPassword !== confirmPassword ||\n            !newPassword || !confirmPassword ){\n            setPassErrorMsg('Password is not matched');\n        }\n        else{\n            setPassErrorMsg('');\n        }\n    },\n    [newPassword, confirmPassword]);\n\n    const onFormSubmit = (e)=>{\n        e.preventDefault();\n\n        if(!passErrorMsg){\n            \n            axios.post(\n            'http://192.168.5.137:3100/user/resetPassword',\n            {\n                userId: userId,\n                newPassword: newPassword,\n                token: token\n            })\n            .then(res=>{\n                if(res && res.data){\n                    setResetSuccess(true);\n                }\n            })\n            .catch(async err=>{\n                console.log(err);\n                if(err.response){\n                    const resData = await err.response.data;\n                    setServerErrorMsg(resData.message);\n                }\n            })\n        }\n    }\n\n    return (\n        <div className={classes.overlay}>\n            <div className={classes.title}>\n                Reset password\n            </div>\n            {\n                serverErrorMsg?\n                <div className={classes.errorMessage}>\n                    {serverErrorMsg}\n                </div>\n                :\n                null\n            }\n            {   \n                passErrorMsg?\n                <div className={classes.errorMessage}>\n                    {passErrorMsg}\n                </div>\n                :\n                null\n            }\n            {\n                \n                resetSuccess?\n                <div className={classes.resetSuccess}>\n                    Reset password success!!!\n                </div>\n                :\n                <form className={classes.content} onSubmit={onFormSubmit}>\n                    <div className={classes.inputGroup}>\n                        <label>NewPassword</label>\n                        <input className={classes.passwordField}\n                            type='password'\n                            onChange={(e)=>setNewPassword(e.target.value)}\n                            required />\n                    </div>\n                    <div className={classes.inputGroup}>\n                        <label>Confirm password</label>\n                        <input className={classes.confirmPasswordField}\n                            type='password' \n                            onChangeCapture={(e)=>setConfirmPassword(e.target.value)}\n                            required />\n                    </div>\n                    {\n                        passErrorMsg?\n                        null\n                        :\n                        <div className={classes.submitBtn}>\n                            <button type='submit'>Submit</button>\n                        </div>\n                    }\n                </form>\n            }\n        </div>\n    );\n}\n\nexport default ResetPassword;","import React from 'react';\nimport {Switch, Route} from 'react-router-dom';\nimport ResetPassword from './components/resetPassword/resetPassword';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Switch>\n        <Route exact path='/' render={()=><div>hello</div>} />\n        <Route exact path='/resetPassword/:userId/:token' component={ResetPassword} />\n      </Switch>    \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {BrowserRouter} from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}