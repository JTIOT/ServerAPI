{"ast":null,"code":"import _slicedToArray from \"/Users/Nelson/Desktop/JITIOT/ServerAPI/client/resetpass/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/Nelson/Desktop/JITIOT/ServerAPI/client/resetpass/src/components/resetPassword/resetPassword.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport classes from './resetPassword.module.scss';\n\nconst ResetPassword = ({\n  match\n}) => {\n  const _match$params = match.params,\n        userId = _match$params.userId,\n        token = _match$params.token;\n\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        resetSuccess = _useState2[0],\n        setResetSuccess = _useState2[1];\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        newPassword = _useState4[0],\n        setNewPassword = _useState4[1];\n\n  const _useState5 = useState(''),\n        _useState6 = _slicedToArray(_useState5, 2),\n        confirmPassword = _useState6[0],\n        setConfirmPassword = _useState6[1];\n\n  const _useState7 = useState(''),\n        _useState8 = _slicedToArray(_useState7, 2),\n        passErrorMsg = _useState8[0],\n        setPassErrorMsg = _useState8[1];\n\n  const _useState9 = useState(''),\n        _useState10 = _slicedToArray(_useState9, 2),\n        serverErrorMsg = _useState10[0],\n        setServerErrorMsg = _useState10[1];\n\n  useEffect(() => {\n    if (newPassword !== confirmPassword || !newPassword || !confirmPassword) {\n      setPassErrorMsg('Password is not matched');\n    } else {\n      setPassErrorMsg('');\n    }\n  }, [newPassword, confirmPassword]);\n\n  const onFormSubmit = e => {\n    e.preventDefault();\n\n    if (!passErrorMsg) {\n      axios.post('http://192.168.5.137:3100/user/resetPassword', {\n        userId: userId,\n        newPassword: newPassword,\n        token: token\n      }).then(res => res.data.json()).then(data => {\n        console.log(data);\n        setResetSuccess(true);\n      }).catch(async err => {\n        console.log(err);\n\n        if (err.response) {\n          const resData = await err.response.data;\n          setServerErrorMsg(resData.message);\n        }\n      });\n    }\n  };\n\n  return React.createElement(\"div\", {\n    className: classes.overlay,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classes.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, \"Reset password\"), serverErrorMsg ? React.createElement(\"div\", {\n    className: classes.errorMessage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, serverErrorMsg) : null, passErrorMsg ? React.createElement(\"div\", {\n    className: classes.errorMessage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, passErrorMsg) : null, resetSuccess ? React.createElement(\"div\", {\n    className: classes.resetSuccess,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, \"Reset password success!!!\") : React.createElement(\"form\", {\n    className: classes.content,\n    onSubmit: onFormSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classes.inputGroup,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, \"NewPassword\"), React.createElement(\"input\", {\n    className: classes.passwordField,\n    type: \"password\",\n    onChange: e => setNewPassword(e.target.value),\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: classes.inputGroup,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, \"Confirm password\"), React.createElement(\"input\", {\n    className: classes.confirmPasswordField,\n    type: \"password\",\n    onChangeCapture: e => setConfirmPassword(e.target.value),\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  })), passErrorMsg ? null : React.createElement(\"div\", {\n    className: classes.submitBtn,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, \"Submit\"))));\n};\n\nexport default ResetPassword;","map":{"version":3,"sources":["/Users/Nelson/Desktop/JITIOT/ServerAPI/client/resetpass/src/components/resetPassword/resetPassword.jsx"],"names":["React","useState","useEffect","axios","classes","ResetPassword","match","params","userId","token","resetSuccess","setResetSuccess","newPassword","setNewPassword","confirmPassword","setConfirmPassword","passErrorMsg","setPassErrorMsg","serverErrorMsg","setServerErrorMsg","onFormSubmit","e","preventDefault","post","then","res","data","json","console","log","catch","err","response","resData","message","overlay","title","errorMessage","content","inputGroup","passwordField","target","value","confirmPasswordField","submitBtn"],"mappings":"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","sourcesContent":["import React,{useState, useEffect} from 'react';\nimport axios from 'axios';\nimport classes from './resetPassword.module.scss';\n\nconst ResetPassword = ({match})=>{\n\n    const {userId, token} = match.params;\n    const [resetSuccess, setResetSuccess] = useState(false);\n    const [newPassword, setNewPassword] = useState('');\n    const [confirmPassword, setConfirmPassword] = useState('');\n    const [passErrorMsg, setPassErrorMsg] = useState('');\n    const [serverErrorMsg, setServerErrorMsg] = useState('');\n\n    useEffect(()=>{\n        if(newPassword !== confirmPassword ||\n            !newPassword || !confirmPassword ){\n            setPassErrorMsg('Password is not matched');\n        }\n        else{\n            setPassErrorMsg('');\n        }\n    },\n    [newPassword, confirmPassword]);\n\n    const onFormSubmit = (e)=>{\n        e.preventDefault();\n\n        if(!passErrorMsg){\n            \n            axios.post(\n            'http://192.168.5.137:3100/user/resetPassword',\n            {\n                userId: userId,\n                newPassword: newPassword,\n                token: token\n            })\n            .then(res=>res.data.json())\n            .then(data=>{\n                console.log(data);\n                setResetSuccess(true);\n            })\n            .catch(async err=>{\n                console.log(err);\n                if(err.response){\n                    const resData = await err.response.data;\n                    setServerErrorMsg(resData.message);\n                }\n            })\n        }\n    }\n\n    return (\n        <div className={classes.overlay}>\n            <div className={classes.title}>\n                Reset password\n            </div>\n            {\n                serverErrorMsg?\n                <div className={classes.errorMessage}>\n                    {serverErrorMsg}\n                </div>\n                :\n                null\n            }\n            {   \n                passErrorMsg?\n                <div className={classes.errorMessage}>\n                    {passErrorMsg}\n                </div>\n                :\n                null\n            }\n            {\n                \n                resetSuccess?\n                <div className={classes.resetSuccess}>\n                    Reset password success!!!\n                </div>\n                :\n                <form className={classes.content} onSubmit={onFormSubmit}>\n                    <div className={classes.inputGroup}>\n                        <label>NewPassword</label>\n                        <input className={classes.passwordField}\n                            type='password'\n                            onChange={(e)=>setNewPassword(e.target.value)}\n                            required />\n                    </div>\n                    <div className={classes.inputGroup}>\n                        <label>Confirm password</label>\n                        <input className={classes.confirmPasswordField}\n                            type='password' \n                            onChangeCapture={(e)=>setConfirmPassword(e.target.value)}\n                            required />\n                    </div>\n                    {\n                        passErrorMsg?\n                        null\n                        :\n                        <div className={classes.submitBtn}>\n                            <button type='submit'>Submit</button>\n                        </div>\n                    }\n                </form>\n            }\n        </div>\n    );\n}\n\nexport default ResetPassword;"]},"metadata":{},"sourceType":"module"}