{"ast":null,"code":"import _slicedToArray from \"/Users/Nelson/Desktop/JITIOT/ServerAPI/client/resetpass/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/Nelson/Desktop/JITIOT/ServerAPI/client/resetpass/src/components/resetPassword/resetPassword.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport classes from './resetPassword.module.scss';\n\nconst ResetPassword = ({\n  match\n}) => {\n  const _match$params = match.params,\n        userId = _match$params.userId,\n        token = _match$params.token;\n\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        newPassword = _useState2[0],\n        setNewPassword = _useState2[1];\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        confirmPassword = _useState4[0],\n        setConfirmPassword = _useState4[1];\n\n  const _useState5 = useState(''),\n        _useState6 = _slicedToArray(_useState5, 2),\n        passErrorMsg = _useState6[0],\n        setPassErrorMsg = _useState6[1];\n\n  const _useState7 = useState(''),\n        _useState8 = _slicedToArray(_useState7, 2),\n        serverErrorMsg = _useState8[0],\n        setServerErrorMsg = _useState8[1];\n\n  useEffect(() => {\n    if (newPassword !== confirmPassword || !newPassword || !confirmPassword) {\n      setPassErrorMsg('Password is not matched');\n    } else {\n      setPassErrorMsg('');\n    }\n  }, [newPassword, confirmPassword]);\n\n  const onFormSubmit = e => {\n    e.preventDefault();\n\n    if (!passErrorMsg) {\n      axios.post('http://192.168.5.137:3100/user/resetPassword', {\n        userId: userId,\n        newPassword: newPassword,\n        token: token\n      }).then(res => {\n        console.log(res);\n      }).catch(err => {\n        console.log(err);\n        const data = err.response.json();\n        console.log(data);\n      });\n    }\n  };\n\n  return React.createElement(\"div\", {\n    className: classes.overlay,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classes.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, \"Reset password\"), serverErrorMsg ? React.createElement(\"div\", {\n    className: classes.errorMessage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, serverErrorMsg) : null, passErrorMsg ? React.createElement(\"div\", {\n    className: classes.errorMessage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, passErrorMsg) : null, React.createElement(\"form\", {\n    className: classes.content,\n    onSubmit: onFormSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classes.inputGroup,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, \"NewPassword\"), React.createElement(\"input\", {\n    className: classes.passwordField,\n    type: \"password\",\n    onChange: e => setNewPassword(e.target.value),\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: classes.inputGroup,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, \"Confirm password\"), React.createElement(\"input\", {\n    className: classes.confirmPasswordField,\n    type: \"password\",\n    onChangeCapture: e => setConfirmPassword(e.target.value),\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  })), passErrorMsg ? null : React.createElement(\"div\", {\n    className: classes.submitBtn,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, \"Submit\"))));\n};\n\nexport default ResetPassword;","map":{"version":3,"sources":["/Users/Nelson/Desktop/JITIOT/ServerAPI/client/resetpass/src/components/resetPassword/resetPassword.jsx"],"names":["React","useState","useEffect","axios","classes","ResetPassword","match","params","userId","token","newPassword","setNewPassword","confirmPassword","setConfirmPassword","passErrorMsg","setPassErrorMsg","serverErrorMsg","setServerErrorMsg","onFormSubmit","e","preventDefault","post","then","res","console","log","catch","err","data","response","json","overlay","title","errorMessage","content","inputGroup","passwordField","target","value","confirmPasswordField","submitBtn"],"mappings":"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","sourcesContent":["import React,{useState, useEffect} from 'react';\nimport axios from 'axios';\nimport classes from './resetPassword.module.scss';\n\nconst ResetPassword = ({match})=>{\n\n    const {userId, token} = match.params;\n    const [newPassword, setNewPassword] = useState('');\n    const [confirmPassword, setConfirmPassword] = useState('');\n    const [passErrorMsg, setPassErrorMsg] = useState('');\n    const [serverErrorMsg, setServerErrorMsg] = useState('');\n\n    useEffect(()=>{\n        if(newPassword !== confirmPassword ||\n            !newPassword || !confirmPassword ){\n            setPassErrorMsg('Password is not matched');\n        }\n        else{\n            setPassErrorMsg('');\n        }\n    },\n    [newPassword, confirmPassword]);\n\n    const onFormSubmit = (e)=>{\n        e.preventDefault();\n\n        if(!passErrorMsg){\n            \n            axios.post(\n            'http://192.168.5.137:3100/user/resetPassword',\n            {\n                userId: userId,\n                newPassword: newPassword,\n                token: token\n            })\n            .then(res=>{\n                console.log(res);\n            })\n            .catch(err=>{\n                console.log(err);\n                const data = err.response.json();\n                console.log(data);\n            })\n        }\n    }\n\n    return (\n        <div className={classes.overlay}>\n            <div className={classes.title}>\n                Reset password\n            </div>\n            {\n                serverErrorMsg?\n                <div className={classes.errorMessage}>\n                    {serverErrorMsg}\n                </div>\n                :\n                null\n            }\n            {   \n                passErrorMsg?\n                <div className={classes.errorMessage}>\n                    {passErrorMsg}\n                </div>\n                :\n                null\n            }\n            <form className={classes.content} onSubmit={onFormSubmit}>\n                <div className={classes.inputGroup}>\n                    <label>NewPassword</label>\n                    <input className={classes.passwordField}\n                        type='password'\n                        onChange={(e)=>setNewPassword(e.target.value)}\n                        required />\n                </div>\n                <div className={classes.inputGroup}>\n                    <label>Confirm password</label>\n                    <input className={classes.confirmPasswordField}\n                        type='password' \n                        onChangeCapture={(e)=>setConfirmPassword(e.target.value)}\n                        required />\n                </div>\n                {\n                    passErrorMsg?\n                    null\n                    :\n                    <div className={classes.submitBtn}>\n                        <button type='submit'>Submit</button>\n                    </div>\n                }\n            </form>\n        </div>\n    );\n}\n\nexport default ResetPassword;"]},"metadata":{},"sourceType":"module"}