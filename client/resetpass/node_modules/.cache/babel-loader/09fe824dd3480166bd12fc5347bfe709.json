{"ast":null,"code":"const spawn = require('child_process').spawn;\n\nmodule.exports = {\n  tree,\n  pidsForTree,\n  getStat\n};\n\nfunction getStat() {\n  return new Promise(resolve => {\n    const command = `ls /proc | grep -E '^[0-9]+$' | xargs -I{} cat /proc/{}/stat`;\n    const child = spawn('sh', ['-c', command], {\n      stdio: ['pipe', 'pipe', 'pipe']\n    });\n    var res = '';\n    child.stdout.on('data', data => res += data);\n    child.on('close', () => resolve(res));\n  });\n}\n\nfunction template(s) {\n  var stat = null; // 'pid', 'comm', 'state', 'ppid', 'pgrp'\n  // %d     (%s)    %c       %d      %d\n\n  s.replace(/(\\d+) \\((.*?)\\)\\s(.+?)\\s(\\d+)\\s/g, (all, PID, COMMAND, STAT, PPID) => {\n    stat = {\n      PID,\n      COMMAND,\n      PPID,\n      STAT\n    };\n  });\n  return stat;\n}\n\nfunction tree(stats) {\n  const processes = stats.split('\\n').map(template).filter(Boolean);\n  return processes;\n}\n\nfunction pidsForTree(tree, pid) {\n  if (typeof pid === 'number') {\n    pid = pid.toString();\n  }\n\n  const parents = [pid];\n  const children = [];\n  tree.forEach(proc => {\n    if (parents.indexOf(proc.PPID) !== -1) {\n      parents.push(proc.PID);\n      children.push(proc);\n    }\n  });\n  return children;\n}","map":{"version":3,"sources":["/Users/Nelson/Desktop/JITIOT/ServerAPI/node_modules/pstree.remy/lib/utils.js"],"names":["spawn","require","module","exports","tree","pidsForTree","getStat","Promise","resolve","command","child","stdio","res","stdout","on","data","template","s","stat","replace","all","PID","COMMAND","STAT","PPID","stats","processes","split","map","filter","Boolean","pid","toString","parents","children","forEach","proc","indexOf","push"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,eAAD,CAAP,CAAyBD,KAAvC;;AAEAE,MAAM,CAACC,OAAP,GAAiB;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,WAAR;AAAqBC,EAAAA;AAArB,CAAjB;;AAEA,SAASA,OAAT,GAAmB;AACjB,SAAO,IAAIC,OAAJ,CAAYC,OAAO,IAAI;AAC5B,UAAMC,OAAO,GAAI,8DAAjB;AACA,UAAMC,KAAK,GAAGV,KAAK,CAAC,IAAD,EAAO,CAAC,IAAD,EAAOS,OAAP,CAAP,EAAwB;AACzCE,MAAAA,KAAK,EAAE,CAAC,MAAD,EAAS,MAAT,EAAiB,MAAjB;AADkC,KAAxB,CAAnB;AAIA,QAAIC,GAAG,GAAG,EAAV;AACAF,IAAAA,KAAK,CAACG,MAAN,CAAaC,EAAb,CAAgB,MAAhB,EAAwBC,IAAI,IAAKH,GAAG,IAAIG,IAAxC;AACAL,IAAAA,KAAK,CAACI,EAAN,CAAS,OAAT,EAAkB,MAAMN,OAAO,CAACI,GAAD,CAA/B;AACD,GATM,CAAP;AAUD;;AAED,SAASI,QAAT,CAAkBC,CAAlB,EAAqB;AACnB,MAAIC,IAAI,GAAG,IAAX,CADmB,CAEnB;AACA;;AACAD,EAAAA,CAAC,CAACE,OAAF,CACE,kCADF,EAEE,CAACC,GAAD,EAAMC,GAAN,EAAWC,OAAX,EAAoBC,IAApB,EAA0BC,IAA1B,KAAmC;AACjCN,IAAAA,IAAI,GAAG;AAAEG,MAAAA,GAAF;AAAOC,MAAAA,OAAP;AAAgBE,MAAAA,IAAhB;AAAsBD,MAAAA;AAAtB,KAAP;AACD,GAJH;AAOA,SAAOL,IAAP;AACD;;AAED,SAASd,IAAT,CAAcqB,KAAd,EAAqB;AACnB,QAAMC,SAAS,GAAGD,KAAK,CACpBE,KADe,CACT,IADS,EAEfC,GAFe,CAEXZ,QAFW,EAGfa,MAHe,CAGRC,OAHQ,CAAlB;AAKA,SAAOJ,SAAP;AACD;;AAED,SAASrB,WAAT,CAAqBD,IAArB,EAA2B2B,GAA3B,EAAgC;AAC9B,MAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AAC3BA,IAAAA,GAAG,GAAGA,GAAG,CAACC,QAAJ,EAAN;AACD;;AACD,QAAMC,OAAO,GAAG,CAACF,GAAD,CAAhB;AACA,QAAMG,QAAQ,GAAG,EAAjB;AAEA9B,EAAAA,IAAI,CAAC+B,OAAL,CAAaC,IAAI,IAAI;AACnB,QAAIH,OAAO,CAACI,OAAR,CAAgBD,IAAI,CAACZ,IAArB,MAA+B,CAAC,CAApC,EAAuC;AACrCS,MAAAA,OAAO,CAACK,IAAR,CAAaF,IAAI,CAACf,GAAlB;AACAa,MAAAA,QAAQ,CAACI,IAAT,CAAcF,IAAd;AACD;AACF,GALD;AAOA,SAAOF,QAAP;AACD","sourcesContent":["const spawn = require('child_process').spawn;\n\nmodule.exports = { tree, pidsForTree, getStat };\n\nfunction getStat() {\n  return new Promise(resolve => {\n    const command = `ls /proc | grep -E '^[0-9]+$' | xargs -I{} cat /proc/{}/stat`;\n    const child = spawn('sh', ['-c', command], {\n      stdio: ['pipe', 'pipe', 'pipe'],\n    });\n\n    var res = '';\n    child.stdout.on('data', data => (res += data));\n    child.on('close', () => resolve(res));\n  });\n}\n\nfunction template(s) {\n  var stat = null;\n  // 'pid', 'comm', 'state', 'ppid', 'pgrp'\n  // %d     (%s)    %c       %d      %d\n  s.replace(\n    /(\\d+) \\((.*?)\\)\\s(.+?)\\s(\\d+)\\s/g,\n    (all, PID, COMMAND, STAT, PPID) => {\n      stat = { PID, COMMAND, PPID, STAT };\n    }\n  );\n\n  return stat;\n}\n\nfunction tree(stats) {\n  const processes = stats\n    .split('\\n')\n    .map(template)\n    .filter(Boolean);\n\n  return processes;\n}\n\nfunction pidsForTree(tree, pid) {\n  if (typeof pid === 'number') {\n    pid = pid.toString();\n  }\n  const parents = [pid];\n  const children = [];\n\n  tree.forEach(proc => {\n    if (parents.indexOf(proc.PPID) !== -1) {\n      parents.push(proc.PID);\n      children.push(proc);\n    }\n  });\n\n  return children;\n}\n"]},"metadata":{},"sourceType":"script"}