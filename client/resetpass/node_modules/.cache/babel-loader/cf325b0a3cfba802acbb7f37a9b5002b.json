{"ast":null,"code":"const spawn = require('child_process').spawn;\n\nmodule.exports = function (rootPid, callback) {\n  const tree = {};\n  var output = ''; // *nix\n\n  const ps = spawn('ps', ['-A', '-o', 'ppid,pid']);\n  ps.stdout.on('data', data => {\n    output += data.toString('ascii');\n  });\n  ps.on('close', () => {\n    try {\n      const res = output.split('\\n').slice(1).map(_ => _.trim()).reduce((acc, line) => {\n        if (line.indexOf(rootPid + ' ') === 0) {\n          const pid = line.split(/\\s+/).pop();\n          acc.push(parseInt(pid, 10));\n          rootPid = pid;\n        }\n\n        return acc;\n      }, []);\n      callback(null, res);\n    } catch (e) {\n      callback(e, null);\n    }\n  });\n};","map":{"version":3,"sources":["/Users/Nelson/Desktop/JITIOT/ServerAPI/node_modules/pstree.remy/lib/tree.js"],"names":["spawn","require","module","exports","rootPid","callback","tree","output","ps","stdout","on","data","toString","res","split","slice","map","_","trim","reduce","acc","line","indexOf","pid","pop","push","parseInt","e"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,eAAD,CAAP,CAAyBD,KAAvC;;AAEAE,MAAM,CAACC,OAAP,GAAiB,UAASC,OAAT,EAAkBC,QAAlB,EAA4B;AAC3C,QAAMC,IAAI,GAAG,EAAb;AACA,MAAIC,MAAM,GAAG,EAAb,CAF2C,CAI3C;;AACA,QAAMC,EAAE,GAAGR,KAAK,CAAC,IAAD,EAAO,CAAC,IAAD,EAAO,IAAP,EAAa,UAAb,CAAP,CAAhB;AACAQ,EAAAA,EAAE,CAACC,MAAH,CAAUC,EAAV,CAAa,MAAb,EAAqBC,IAAI,IAAI;AAC3BJ,IAAAA,MAAM,IAAII,IAAI,CAACC,QAAL,CAAc,OAAd,CAAV;AACD,GAFD;AAIAJ,EAAAA,EAAE,CAACE,EAAH,CAAM,OAAN,EAAe,MAAM;AACnB,QAAI;AACF,YAAMG,GAAG,GAAGN,MAAM,CACfO,KADS,CACH,IADG,EAETC,KAFS,CAEH,CAFG,EAGTC,GAHS,CAGLC,CAAC,IAAIA,CAAC,CAACC,IAAF,EAHA,EAITC,MAJS,CAIF,CAACC,GAAD,EAAMC,IAAN,KAAe;AACrB,YAAIA,IAAI,CAACC,OAAL,CAAalB,OAAO,GAAG,GAAvB,MAAgC,CAApC,EAAuC;AACrC,gBAAMmB,GAAG,GAAGF,IAAI,CAACP,KAAL,CAAW,KAAX,EAAkBU,GAAlB,EAAZ;AACAJ,UAAAA,GAAG,CAACK,IAAJ,CAASC,QAAQ,CAACH,GAAD,EAAM,EAAN,CAAjB;AACAnB,UAAAA,OAAO,GAAGmB,GAAV;AACD;;AAED,eAAOH,GAAP;AACD,OAZS,EAYP,EAZO,CAAZ;AAcAf,MAAAA,QAAQ,CAAC,IAAD,EAAOQ,GAAP,CAAR;AACD,KAhBD,CAgBE,OAAOc,CAAP,EAAU;AACVtB,MAAAA,QAAQ,CAACsB,CAAD,EAAI,IAAJ,CAAR;AACD;AACF,GApBD;AAqBD,CA/BD","sourcesContent":["const spawn = require('child_process').spawn;\n\nmodule.exports = function(rootPid, callback) {\n  const tree = {};\n  var output = '';\n\n  // *nix\n  const ps = spawn('ps', ['-A', '-o', 'ppid,pid']);\n  ps.stdout.on('data', data => {\n    output += data.toString('ascii');\n  });\n\n  ps.on('close', () => {\n    try {\n      const res = output\n        .split('\\n')\n        .slice(1)\n        .map(_ => _.trim())\n        .reduce((acc, line) => {\n          if (line.indexOf(rootPid + ' ') === 0) {\n            const pid = line.split(/\\s+/).pop();\n            acc.push(parseInt(pid, 10));\n            rootPid = pid;\n          }\n\n          return acc;\n        }, []);\n\n      callback(null, res);\n    } catch (e) {\n      callback(e, null);\n    }\n  });\n};\n"]},"metadata":{},"sourceType":"script"}